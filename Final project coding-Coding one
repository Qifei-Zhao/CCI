<html>

<head>
 <!-- This is an HTML comment -->
 <!-- Below we are grabbing three.js and some helper stuff for using the camera -->
  <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
 
	<meta charset="utf-8">
	<style>
		body {
			margin: 0px;
          background: url("background/background.png") center no-repeat;
    background-size:cover;
			overflow: hidden;
		}
	</style>
</head>

<body>
  
  
<script language="javascript" type="text/javascript">
  
  
// First we need to set up some objects and initialise them.
// Three.js provides a canvas automatically so we don't need that. 
// This creates a camera. It has a field of view, a size, a near clipping plane and a far clipping plane     
 var theta = 0;
// 初始化鼠标X方向移动值
var mouseX = 0;
var r = 1000 / (2* Math.PI); // 用于角度计算： 鼠标移动1000px时，角度改变2PI
var far = 20000; // 用于照相机焦点设置（焦点距离，越大越精确）
var move = 0.1; // 用于步长（照相机移动距离）
// 设置场景
  
	var camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000); 
  
  camera.position.set( 0,-5, 1);
camera.up = new THREE.Vector3(0,0,1);
camera.lookAt(new THREE.Vector3(0,0,1));
// 定义着色器
    
// We need to create a scene and add things to it.   
	var scene = new THREE.Scene();
// Now we are goint to create some built in geometry 
// It's a box.    
	var geometry = new THREE.SphereGeometry(1, 200, 200);
      for ( var i = 0; i < 100; i ++ ) {
    var material = new THREE.MeshBasicMaterial({color:"yellow"});//材料
    var mesh = new THREE.Mesh( geometry, material );
    mesh.position.x = ( Math.random() - 0.5 ) * 1000;
    mesh.position.y = ( Math.random() - 0.5 ) * 1000;
    mesh.position.z = ( Math.random() - 0.5 ) * 1000;
    scene.add( mesh );
}
    var geometry1 = new THREE.SphereGeometry(1, 200, 200);
    
    var geometry3 = new THREE.CylinderGeometry(0.1,0.1,1.5,50 );
var geometry4 = new THREE.ConeGeometry( 0.1, 0.3, 50 );
  var geometry5 = new THREE.SphereGeometry(1, 200, 200);
  
// We are going to want to texture the box.
// To do this we need a texture loader object to load the texture 
	var myTextureLoader = new THREE.TextureLoader();
// Then we can load the texture into a variable
	var myTexture = myTextureLoader.load('sky.jpg');
    var myTexture1 = myTextureLoader.load('star.jpg');  
    var myTexture2 = myTextureLoader.load('red.jpg');
  var myTexture3 = myTextureLoader.load('rocket.jpg');
  
    var myTexture5 = myTextureLoader.load('sun.jpg');

// Now we need to create a material
// This defines how the surface of the object reflects light
// We're using Phong. There are lots of other types.      
	var material = new THREE.MeshPhongMaterial({map: myTexture});
    var material1 = new THREE.MeshPhongMaterial({map: myTexture1});
    
  var material3 = new THREE.MeshPhongMaterial({map: myTexture3});
  var material4 = new THREE.MeshPhongMaterial({map: myTexture2});
  var material5 = new THREE.MeshPhongMaterial({map: myTexture5});
  
  
// We can now create a mesh using the geomentry and the material
    //this.rocket = new THREE.Object3D();
    var mesh = new THREE.Mesh(geometry, material);
    var mesh1 = new THREE.Mesh(geometry1, material1);
    
    var mesh3 = new THREE.Mesh(geometry3, material3 );
    var mesh4 = new THREE.Mesh(geometry4, material4);
    var mesh5 = new THREE.Mesh(geometry5, material5);

  
// If we want to see stuff, we will need a light.
// The argument is the colour of the light in hexadecimal.      
	var light = new THREE.DirectionalLight("rgb(255,255,255)");
    
// Now we can create our renderer. Thiis renders the scene.      
	var renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight)
document.body.appendChild(renderer.domElement)
  renderer.shadowMap.enabled = true
renderer.shadowMap.type = THREE.PCFSoftShadowMap
  
  function initFloor() {
    var floorGeo = new THREE.PlaneBufferGeometry(12, 8, 1, 1)
    var floorMaterial = new THREE.MeshStandardMaterial({ color: '#aaafff' })
    var floor = new THREE.Mesh(floorGeo, floorMaterial)
    floor.position.set(0, 0, -1)
    floor.receiveShadow = true; // 接受阴影
    scene.add(floor)
    return floor
}
  var floor = initFloor()
  
  
// 添加物体

  
  function initLight() {
    var light = new THREE.SpotLight(0xfffff0)
    light.position.set(0, -3, 4)
    light.target = floor; // 投射方向指向地板
    light.castShadow = true; // 用于产生阴影
    scene.add(light)
    // 光源的阴影设置
    light.shadow.mapSize.width = 512 // default
    light.shadow.mapSize.height = 512 // default
    light.shadow.camera.near = 0.5 // default
    light.shadow.camera.far = 500 // default
    var helper = new THREE.CameraHelper(light.shadow.camera)
    scene.add(helper)
}
initLight()

// 添加按键时走动
document.addEventListener('keydown', handleKeydown, false);
// 添加鼠标移动时事件
document.addEventListener('mousemove', handleMousemove, false);
// 添加鼠标进入页面时初始化鼠标位置
document.addEventListener('mouseenter', initMousePosition, false);
// 处理按键
function handleKeydown(e) {
    var e = e || window.event;
    var keyCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;
    if ('37, 38, 39, 40, 65, 87, 68, 83'.indexOf(keyCode) === -1) {
        return;
    } else {
        switch (e.keyCode) {
            case 37:
            case 65:
                CameraMove('left');
                break;
            case 38:
            case 87:
                CameraMove('forward');
                break;
            case 39:
            case 68:
                CameraMove('right');
                break;
            case 83:
            case 40:
                CameraMove('backward');
                break;
        }
    }
}
// 照相机移动计算
function CameraMove(direction) {
    var x, y;
    var oX = camera.position.x, oY = camera.position.y;
    switch (direction) {
        case 'left':
            x = oX - move * Math.cos(theta);
            y = oY + move * Math.sin(theta);
            break;
        case 'forward':
            x = oX + move * Math.sin(theta);
            y = oY + move * Math.cos(theta);
            break;
        case 'right':
            x = oX + move * Math.cos(theta);
            y = oY - move * Math.sin(theta);
            break;
        case 'backward':
            x = oX - move * Math.sin(theta);
            y = oY - move * Math.cos(theta);
            break;
    }
    camera.position.x = x;
    camera.position.y = y;
}
// 初始化鼠标移动值
function initMousePosition(e) {
    mouseX = getMousePos(e || window.event);
}
// 获取鼠标坐标
function getMousePos(event) {
    var e = event || window.event;
    var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
    var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
    var x = e.pageX || e.clientX + scrollX;
    var y = e.pageY || e.clientY + scrollY;
    return { 'x': x, 'y': y };
}
// 处理鼠标移动
function handleMousemove(e) {
    var e = e || window.event;
    // 获取鼠标x坐标
    var newMouseX = getMousePos(e).x;
    // 若值无效，更新坐标然后返回
    if (Number.isNaN((newMouseX - mouseX) / r)) { mouseX = newMouseX; return; }
    // 更新视角以及坐标位置
    theta += (newMouseX - mouseX) / r;
    mouseX = newMouseX;
    // 更新照相机焦点
    renderCameraLookat();
}
// 更新照相机焦点
function renderCameraLookat() {
    camera.lookAt(new THREE.Vector3(camera.position.x + far * Math.sin(theta), camera.position.y + far * Math.cos(theta), 1));
}

 

  


// Now we can set some variables for the objects.
 
      //camera.position.set(9,0,10);

      mesh.position.set(0,0,0);
      mesh1.position.set(-2,-10,0);
      mesh3.position.set(-2,0,0);
      mesh4.position.set(-2,0.9,0);
      mesh5.position.set(3,-13,2);
  
 const geometry0 = new THREE.CylinderGeometry(0.06,0.2,0.3,50 );
  var myTexture0 = myTextureLoader.load('fire.jpg');
const material0 = new THREE.MeshPhongMaterial({map: myTexture0});
const cone = new THREE.Mesh( geometry0, material0 );
  cone.position.set(-2,-0.8,0);
	
  var group = new THREE.Group();
group.add( mesh3 );
group.add( mesh4 );
group.add( cone );

  
 
	light.position.set(0,30,30);
  //light1.position.set(20,20,10);
 
  
    scene.add(mesh);
    scene.add(mesh1);
    //scene.add(mesh3);
    //scene.add(mesh4);
    scene.add(mesh5);
    //scene.add( cone );
    scene.add(group);
    
	scene.add(light);
    //scene.add(light1);
  
  
// This is to make sure that the scene understands the resolution of the device we are on.
	renderer.setPixelRatio(window.devicePixelRatio);
// We can also set the size of the render window
	renderer.setSize(window.innerWidth, window.innerHeight);
// Finally we want to connect the renderer to the HTML document
	document.body.appendChild(renderer.domElement);
// And make sure that when the page is resized, everything gets updated 
	window.addEventListener('resize', onWindowResize, false);    

  
//  Now we can have a draw loop.    
function draw() {
  
 	mesh.rotation.x += 0.005;
    mesh.rotation.y += 0.01;
    mesh1.rotation.y += -0.005;
    mesh1.rotation.x += -0.005;
    mesh5.rotation.y += -0.01;
  mesh5.rotation.x += 0.01;
    mesh3.rotation.y += -0.01;
    cone.rotation.y += -0.01;
  group.rotation.z += -0.01;
    //mesh3.rotation.x += -0.01;
  
	renderer.render(scene, camera);
	requestAnimationFrame(draw);
}
  
  var listener = new THREE.AudioListener();
// camera.add( listener );
// 创建一个非位置音频对象  用来控制播放
var audio = new THREE.Audio(listener);
// 创建一个音频加载器对象
var audioLoader = new THREE.AudioLoader();
// 加载音频文件，返回一个音频缓冲区对象作为回调函数参数
audioLoader.load('echo.mp3', function(AudioBuffer) {
  // console.log(AudioBuffer)
  // 音频缓冲区对象关联到音频对象audio
  audio.setBuffer(AudioBuffer);
  audio.setLoop(true); //是否循环
  audio.setVolume(0.5); //音量
  // 播放缓冲区中的音频数据
  audio.play(); //play播放、stop停止、pause暂停
});
  
  function onDocumentMouseMove(event){
    event.preventDefault();
    var mouse = convertTo3DCoordinate(event.clientX,event.clientY);
    mesh5.position.copy(mouse)
}
    
  
// This is the thing that does the resizing      
function onWindowResize() {
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();
  
    //camera1.aspect = window.innerWidth / window.innerHeight;
	//camera1.updateProjectionMatrix();
	renderer.setSize(window.innerWidth, window.innerHeight);
}    

// Finally, call the draw loop.      
requestAnimationFrame(draw());
       
	</script>
</body>

</html>
